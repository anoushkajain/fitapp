{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onLoad","data","setState","state","property","filter_value","fetch","then","res","json","this","event","console","log","target","value","className","alt","width","src","noValidate","autoComplete","TextField","id","variant","onChange","propertyChangeHandler","bind","placeholder","valueChangeHandler","filter","d","title","toLowerCase","includes","genres","year","parseInt","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yQAoFeA,G,wDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,OAAS,SAACC,GACR,EAAKC,SAAS,CACZD,KAAMA,KAVR,EAAKE,MAAQ,CAACC,SAAS,GAAIC,aAAa,GAAIJ,KAAM,IAFjC,E,gEAKTK,MAAM,cACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,KAAKG,KAAKV,U,4CASDW,GACpBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBL,KAAKR,SAAS,CACZE,SAAUO,EAAMG,OAAOC,U,yCAIRJ,GACjBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBL,KAAKR,SAAS,CACZa,MAAOJ,EAAMG,OAAOC,U,+BAIf,IAAD,OACN,OACE,yBAAKC,UAAU,QAEb,2BAAOA,UAAU,YACf,+BACE,4BACE,4BACE,yBAAKC,IAAI,WAAWC,MAAM,KAAKC,IAAI,mDAErC,wBAAID,MAAM,MACV,4BACE,iDAKR,0BAAME,YAAU,EAACC,aAAa,OAC9B,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAkBC,QAAQ,WAAWT,MAAOL,KAAKP,MAAMC,SAAUY,UAAU,YAAYS,SAAUf,KAAKgB,sBAAsBC,KAAKjB,MAAOkB,YAAY,sDAClK,kBAACN,EAAA,EAAD,CAAWC,GAAG,iBAAkBC,QAAQ,WAAWT,MAAOL,KAAKP,MAAMY,MAAOC,UAAU,YAAYS,SAAUf,KAAKmB,mBAAmBF,KAAKjB,MAAOkB,YAAY,mFAE7J,yBAAKZ,UAAU,WACTN,KAAKP,MAAMF,KAAK6B,QAAO,SAAAC,GACtB,GAA2B,MAAvB,EAAK5B,MAAMC,UAAwC,MAApB,EAAKD,MAAMY,MAC1C,OAAO,KACN,GAA4B,UAAxB,EAAKZ,MAAMC,UAClB,GAAI2B,EAAEC,MAAMC,cAAcC,SAAS,EAAK/B,MAAMY,MAAMkB,eAClD,OAAOF,OAGN,GAA4B,UAAxB,EAAK5B,MAAMC,UAClB,GAAI2B,EAAEI,OAAOD,SAAS,EAAK/B,MAAMY,OAC/B,OAAOgB,OAGN,GAA4B,SAAxB,EAAK5B,MAAMC,UACd2B,EAAEK,OAASC,SAAS,EAAKlC,MAAMY,OACjC,OAAOgB,KAGZO,KAAI,SAAAP,GAAC,OAAM,uBAAGf,UAAU,UAAb,iBAAsCe,EAAEC,MAAxC,UAAwDD,EAAEK,KAA1D,YAA2EL,EAAEI,iB,GAxEnFI,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.25f79835.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {property:\"\", filter_value:'', data: []}\n  }\n  componentDidMount () {\n            fetch('/data.json')\n              .then(res => res.json())\n              .then(this.onLoad);\n    }\n\n  onLoad = (data) => {\n    this.setState({\n      data: data\n    })\n  }\n\n  propertyChangeHandler(event) {\n    console.log(event.target.value)\n    this.setState({\n      property: event.target.value\n    }) \n  }\n\n  valueChangeHandler(event){\n    console.log(event.target.value)\n    this.setState({\n      value: event.target.value\n    }) \n  }\n\n render() {\n    return (\n      <div className=\"body\">\n        \n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img alt=\"app icon\" width=\"50\" src=\"play-movie-symbol-of-film-strip-photogram.svg\"/>\n              </td>\n              <td width=\"8\"/>\n              <td>\n                <h1>Movies Search</h1>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <form noValidate autoComplete=\"off\">\n        <TextField id=\"outlined-basic\"  variant=\"outlined\" value={this.state.property} className=\"searchBar\" onChange={this.propertyChangeHandler.bind(this)} placeholder=\"Select Attribute like genre, year and movie title\"/>\n        <TextField id=\"outlined-basic\"  variant=\"outlined\" value={this.state.value} className=\"searchBar\" onChange={this.valueChangeHandler.bind(this)} placeholder=\"Enter Value of the attribute like Comedy, 1990, 'After Dark in Central Park' \"/>\n        </form>\n       <div className=\"results\">{\n             this.state.data.filter(d => {\n              if (this.state.property == null || this.state.value == null)\n                  return null\n              else if (this.state.property === 'title'){\n                if (d.title.toLowerCase().includes(this.state.value.toLowerCase())){\n                  return d\n                }\n              }\n              else if (this.state.property === 'genre'){\n                if (d.genres.includes(this.state.value)){\n                  return d\n                }\n              }\n              else if (this.state.property === 'year'){\n                if (d.year === parseInt(this.state.value)){\n                  return d\n                }\n              }\n          }).map(d => ( <p className=\"result\"> Movie title: { d.title } Year: { d.year } Genres: { d.genres }</p>))}\n       </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n                \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}